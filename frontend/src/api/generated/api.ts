/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    'detail'?: Array<ValidationError>;
}
/**
 * 
 * @export
 * @interface Ingredient
 */
export interface Ingredient {
    /**
     * 
     * @type {string}
     * @memberof Ingredient
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Ingredient
     */
    'name': string;
    /**
     * 
     * @type {IngredientCategories}
     * @memberof Ingredient
     */
    'category': IngredientCategories;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const IngredientCategories = {
    Mixers: 'Mixers',
    Spirits: 'Spirits',
    Liqueurs: 'Liqueurs',
    Wine: 'Wine',
    Other: 'Other',
    Meat: 'Meat',
    VegetablesAndFruits: 'Vegetables and Fruits',
    Condiments: 'Condiments',
    PantryEssentials: 'Pantry Essentials',
    OtherFood: 'Other Food'
} as const;

export type IngredientCategories = typeof IngredientCategories[keyof typeof IngredientCategories];


/**
 * 
 * @export
 * @interface Recipe
 */
export interface Recipe {
    /**
     * 
     * @type {string}
     * @memberof Recipe
     */
    'id': string;
    /**
     * 
     * @type {RecipeTypes}
     * @memberof Recipe
     */
    'type': RecipeTypes;
    /**
     * 
     * @type {string}
     * @memberof Recipe
     */
    'name': string;
    /**
     * 
     * @type {RecipeCategories}
     * @memberof Recipe
     */
    'category': RecipeCategories;
    /**
     * 
     * @type {Array<RecipeIngredient>}
     * @memberof Recipe
     */
    'ingredients'?: Array<RecipeIngredient>;
    /**
     * 
     * @type {Array<string>}
     * @memberof Recipe
     */
    'recipe_steps': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof Recipe
     */
    'image_link': string;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const RecipeCategories = {
    Cocktail: 'cocktail',
    Food: 'food'
} as const;

export type RecipeCategories = typeof RecipeCategories[keyof typeof RecipeCategories];


/**
 * 
 * @export
 * @interface RecipeIngredient
 */
export interface RecipeIngredient {
    /**
     * 
     * @type {string}
     * @memberof RecipeIngredient
     */
    'ingredient_uuid': string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const RecipeTypes = {
    Cocktail: 'cocktail',
    Appetizer: 'appetizer',
    MainCourse: 'main_course',
    Dessert: 'dessert',
    Breakfast: 'breakfast'
} as const;

export type RecipeTypes = typeof RecipeTypes[keyof typeof RecipeTypes];


/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<ValidationErrorLocInner>}
     * @memberof ValidationError
     */
    'loc': Array<ValidationErrorLocInner>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
}
/**
 * 
 * @export
 * @interface ValidationErrorLocInner
 */
export interface ValidationErrorLocInner {
}

/**
 * IngredientsApi - axios parameter creator
 * @export
 */
export const IngredientsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete One
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOneIngredientsIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteOneIngredientsIdDelete', 'id', id)
            const localVarPath = `/ingredients/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get All
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllIngredientsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ingredients`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get One
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneIngredientsIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getOneIngredientsIdGet', 'id', id)
            const localVarPath = `/ingredients/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IngredientsApi - functional programming interface
 * @export
 */
export const IngredientsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = IngredientsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Delete One
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteOneIngredientsIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteOneIngredientsIdDelete(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['IngredientsApi.deleteOneIngredientsIdDelete']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Get All
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllIngredientsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Ingredient>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllIngredientsGet(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['IngredientsApi.getAllIngredientsGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Get One
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOneIngredientsIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Ingredient>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOneIngredientsIdGet(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['IngredientsApi.getOneIngredientsIdGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * IngredientsApi - factory interface
 * @export
 */
export const IngredientsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = IngredientsApiFp(configuration)
    return {
        /**
         * 
         * @summary Delete One
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOneIngredientsIdDelete(id: string, options?: any): AxiosPromise<any> {
            return localVarFp.deleteOneIngredientsIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get All
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllIngredientsGet(options?: any): AxiosPromise<Array<Ingredient>> {
            return localVarFp.getAllIngredientsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get One
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneIngredientsIdGet(id: string, options?: any): AxiosPromise<Ingredient> {
            return localVarFp.getOneIngredientsIdGet(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * IngredientsApi - object-oriented interface
 * @export
 * @class IngredientsApi
 * @extends {BaseAPI}
 */
export class IngredientsApi extends BaseAPI {
    /**
     * 
     * @summary Delete One
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IngredientsApi
     */
    public deleteOneIngredientsIdDelete(id: string, options?: RawAxiosRequestConfig) {
        return IngredientsApiFp(this.configuration).deleteOneIngredientsIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get All
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IngredientsApi
     */
    public getAllIngredientsGet(options?: RawAxiosRequestConfig) {
        return IngredientsApiFp(this.configuration).getAllIngredientsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get One
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IngredientsApi
     */
    public getOneIngredientsIdGet(id: string, options?: RawAxiosRequestConfig) {
        return IngredientsApiFp(this.configuration).getOneIngredientsIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * RecipesApi - axios parameter creator
 * @export
 */
export const RecipesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get all recipes
         * @summary Get All
         * @param {RecipeCategories} [category] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllRecipesGet: async (category?: RecipeCategories, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/recipes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (category !== undefined) {
                localVarQueryParameter['category'] = category;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get One
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneRecipesIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getOneRecipesIdGet', 'id', id)
            const localVarPath = `/recipes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RecipesApi - functional programming interface
 * @export
 */
export const RecipesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RecipesApiAxiosParamCreator(configuration)
    return {
        /**
         * Get all recipes
         * @summary Get All
         * @param {RecipeCategories} [category] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllRecipesGet(category?: RecipeCategories, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Recipe>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllRecipesGet(category, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['RecipesApi.getAllRecipesGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Get One
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOneRecipesIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Recipe>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOneRecipesIdGet(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['RecipesApi.getOneRecipesIdGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * RecipesApi - factory interface
 * @export
 */
export const RecipesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RecipesApiFp(configuration)
    return {
        /**
         * Get all recipes
         * @summary Get All
         * @param {RecipeCategories} [category] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllRecipesGet(category?: RecipeCategories, options?: any): AxiosPromise<Array<Recipe>> {
            return localVarFp.getAllRecipesGet(category, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get One
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneRecipesIdGet(id: string, options?: any): AxiosPromise<Recipe> {
            return localVarFp.getOneRecipesIdGet(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RecipesApi - object-oriented interface
 * @export
 * @class RecipesApi
 * @extends {BaseAPI}
 */
export class RecipesApi extends BaseAPI {
    /**
     * Get all recipes
     * @summary Get All
     * @param {RecipeCategories} [category] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecipesApi
     */
    public getAllRecipesGet(category?: RecipeCategories, options?: RawAxiosRequestConfig) {
        return RecipesApiFp(this.configuration).getAllRecipesGet(category, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get One
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecipesApi
     */
    public getOneRecipesIdGet(id: string, options?: RawAxiosRequestConfig) {
        return RecipesApiFp(this.configuration).getOneRecipesIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }
}



